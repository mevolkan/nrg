{"mappings":"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","sources":["src/scripts/videoanalytics.js"],"sourcesContent":["// Let's wrap everything inside a function so variables are not defined as globals \n(function () {\n    // This is gonna our percent buckets ( 10%-90% ) \n    var divisor = 10;\n    // We're going to save our players status on this object. \n    var videos_status = {};\n    // This is the funcion that is gonna handle the event sent by the player listeners \n    function eventHandler(e) {\n        switch (e.type) {\n            // This event type is sent everytime the player updated it's current time, \n            // We're using for the % of the video played. \n            case 'timeupdate':\n                // Let's set the save the current player's video time in our status object \n                videos_status[e.target.id].current = Math.round(e.target.currentTime);\n                // We just want to send the percent events once \n                var pct = Math.floor(100 * videos_status[e.target.id].current / e.target.duration);\n                for (var j in videos_status[e.target.id]._progress_markers) {\n                    if (pct >= j && j > videos_status[e.target.id].greatest_marker) {\n                        videos_status[e.target.id].greatest_marker = j;\n                    }\n                }\n                // current bucket hasn't been already sent to GA?, let's push it to GTM \n                if (videos_status[e.target.id].greatest_marker && !videos_status[e.target.id]._progress_markers[videos_status[e.target.id].greatest_marker]) {\n                    videos_status[e.target.id]._progress_markers[videos_status[e.target.id].greatest_marker] = true; \n                    dataLayer.push({\n                        'event': 'gaEvent',\n                        'gaEventCategory': 'HTML5 Video',\n                        'gaEventAction': 'Progress %' + videos_status[e.target.id].greatest_marker,\n                        // We are using sanitizing the current video src string, and getting just the video name part \n                        'gaEventLabel': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])\n                    });\n                } break;\n            // This event is fired when user's click on the play button \n            case 'play': dataLayer.push({\n                'event': 'gaEvent',\n                'gaEventCategory': 'HTML5 Video',\n                'gaEventAction': 'Play',\n                'gaEventLabel': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])\n            });\n                break;\n            // This event is fied when user's click on the pause button \n            case 'pause': dataLayer.push({\n                'event': 'gaEvent',\n                'gaEventCategory': 'HTML5 Video',\n                'gaEventAction': 'Pause',\n                'gaEventLabel': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1]),\n                'gaEventValue': videos_status[e.target.id].current\n            });\n                break;\n            // If the user ends playing the video, an Finish video will be pushed ( This equals to % played = 100 ) \n            case 'ended': dataLayer.push({\n                'event': 'gaEvent',\n                'gaEventCategory': 'HTML5 Video',\n                'gaEventAction': 'Finished',\n                'gaEventLabel': decodeURIComponent(e.target.currentSrc.split('/')[e.target.currentSrc.split('/').length - 1])\n            });\n                break;\n            default:\n                break;\n        }\n    }\n    // We need to configure the listeners \n    // Let's grab all the the \"video\" objects on the current page \n    var videos = document.getElementsByTagName('video');\n    for (var i = 0; i < videos.length; i++) {\n        // In order to have some id to reference in our status object, we are adding an id to the video objects \n        // that don't have an id attribute. \n        var videoTagId;\n        if (!videos[i].getAttribute('id')) {\n            // Generate a random alphanumeric string to use is as the id \n            videoTagId = 'html5_video_' + Math.random().toString(36).slice(2); \n            videos[i].setAttribute('id', videoTagId);\n        }\n        // Current video has alredy a id attribute, then let's use it\n        else {\n            videoTagId = videos[i].getAttribute('id');\n        }\n        // Video Status Object declaration \n        videos_status[videoTagId] = {};\n        // We'll save the highest percent mark played by the user in the current video. \n        videos_status[videoTagId].greatest_marker = 0;\n        // Let's set the progress markers, so we can know afterwards which ones have been already sent. \n        videos_status[videoTagId]._progress_markers = {}; for (j = 0; j < 100; j++) {\n            videos_status[videoTagId].progress_point = divisor * Math.floor(j / divisor);\n            videos_status[videoTagId]._progress_markers[videos_status[videoTagId].progress_point] = false;\n        }\n        // On page DOM, all players currentTime is 0 \n        videos_status[videoTagId].current = 0;\n        // Now we're setting the event listeners. \n        videos[i].addEventListener(\"play\", eventHandler, false);\n        videos[i].addEventListener(\"pause\", eventHandler, false);\n        videos[i].addEventListener(\"ended\", eventHandler, false);\n        videos[i].addEventListener(\"timeupdate\", eventHandler, false);\n    }\n})();"],"names":[],"version":3,"file":"video.12e386bd.js.map","sourceRoot":"/__parcel_source_root/"}